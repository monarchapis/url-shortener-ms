package com.monarchapis.api.urlshortener.v1.resource;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import org.springframework.stereotype.Component;

import com.google.common.base.Optional;
import com.monarchapis.api.urlshortener.v1.model.ItemsResponse;
import com.monarchapis.api.urlshortener.v1.model.ShortenedUrl;
import com.monarchapis.api.urlshortener.v1.service.UrlShortenerService;
import com.monarchapis.driver.annotation.ApiInject;
import com.monarchapis.driver.annotation.ApiVersion;
import com.monarchapis.driver.annotation.Authorize;
import com.monarchapis.driver.annotation.Claim;
import com.monarchapis.driver.exception.ForbiddenException;
import com.monarchapis.driver.exception.NotFoundException;
import com.monarchapis.driver.model.Claims;

/**
 * TODO
 * 
 * @title URL Shortener API
 * @version v1
 */
@Component
@Path("/v1")
@ApiVersion("1")
public class UrlResource {
	@Inject
	private UrlShortenerService urlShortenerService;

	@ApiInject
	private Claims claims;

	/**
	 * Creates a shortened URL if one does not already exist, Otherwise, the
	 * existing URL will be returned.
	 * 
	 * @param longUrl
	 *            The URL to shorten
	 * @return the created or existing shortened URL
	 */
	@Authorize(client = "urls", delegated = "urls")
	@Path("/urls/shorten")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public ShortenedUrl shorten(@FormParam("longUrl") String longUrl, @FormParam("slug") String slug) {
		if (slug != null) {
			if (!claims.hasValueInClaim("marketing", "group")) {
				throw new ForbiddenException("shortenedUrls");
			}

			return urlShortenerService.shorten(longUrl, slug);
		} else {
			return urlShortenerService.shorten(longUrl);
		}
	}

	/**
	 * Creates a shortened URL if one does not already exist, Otherwise, the
	 * existing URL will be returned.
	 * 
	 * @param longUrl
	 *            The URL to shorten
	 * @return the created or existing shortened URL
	 */
	@Authorize(client = "urls", delegated = "urls", claims = @Claim(type = "group", value = "marketing"))
	@Path("/urls/shorten/{slug}")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public ShortenedUrl assign(@FormParam("longUrl") String longUrl, @PathParam("slug") String slug) {
		return urlShortenerService.shorten(longUrl, slug);
	}

	/**
	 * Expands a slug back to the long URL and optionally increases the visit
	 * count by 1.
	 * 
	 * @param slug
	 *            The slug to look up.
	 * @param visit
	 *            Flag that denotes that the visit count should be increased.
	 * @return If found, the shortened URL
	 * @response code = 404 message = "Shortened URL was not found."
	 */
	@Authorize(user = false, client = "urls")
	@Path("/urls/expand")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public ShortenedUrl expand(@QueryParam("slug") String slug, @QueryParam("visit") boolean visit) {
		if (visit) {
			urlShortenerService.signalVisit(slug);
		}

		return require(urlShortenerService.expand(slug));
	}

	/**
	 * Retrieves the shortened URLs generated by the requesting user.
	 * 
	 * @return The list of shortened URLs that the user has created.
	 */
	@Authorize(client = "urls", delegated = "urls")
	@Path("/me/urls")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public ItemsResponse<ShortenedUrl> myUrls() {
		String userId = claims.getSubject().or("unknown");

		return new ItemsResponse<ShortenedUrl>(urlShortenerService.urlsByUserId(userId));
	}

	private static ShortenedUrl require(Optional<ShortenedUrl> shortenedUrl) {
		if (shortenedUrl.isPresent()) {
			return shortenedUrl.get();
		}

		throw new NotFoundException("shortenedUrls", "Shortened URL");
	}
}
